'use strict';

var jquery = require('jquery');
var nitram = require('nitram');
require('history');

/**
 * Util functions for controller default options
 */

var noop = function () {};
var noopMW = function (next) {
  next();
};
var echo = function (x) {
  return x;
};

/**
 * Routes
 */

nitram.routes = {
  '/': {
    controller: 'home',
    title: 'Home',
    bodyClass: 'body-home',
    req: true // do a GET ajax request to the route
  },
  '/contact': {
    controller: 'contact',
    title: 'Contact',
    bodyClass: 'body-contact',
    req: true
  }
};

/**
 * Controller defaults
 *
 * These are the same defaults already built-in nitram, but you can set your
 * specific default options before making the controllers with the factory.
 *
 * This should be done before creating any controller.
 */

nitram.controllerFactory.setDefaults({

  // ID or DOM element where the partial is going to be injected
  view: '#main',

  /**
   * Function that filters the partial from the ajax response. The returned
   * value is the one that nitram injects in the view.
   *
   * @example
   * partialFilter: function (data) { return data.html; }
   */
  partialFilter: echo,

  /**
   * Entry lifecycle function that is called once the request is ready, and
   * just before the partial is injected into the view. Receives a callback
   * that need to be called when finished.
   * 
   * @example
   * loaded: function (next) {
   *   $('#loading').hide();
   *   next();
   * }
   */
  loaded: noopMW,

  /**
   * Entry lifecycle function that is called after the partial injection.
   * Does not have a callback, because this is the last step of the
   * controller entry lifecycle. 
   */
  ready: noop,

  /**
   * Exit lifecycle function that is called before a change of route: when
   * user clicks a nitram compiled ancho or with programtic routing
   * (i.e. nitram.route('/contact')). It gets not called on a state change
   * that wasn't generated by the previous two actions. Receives a callback
   * that need to be called when finished.
   */
  beforeRouteChange: noopMW,

  /**
   * Exit lifecycle function that is called when there is a change of route.
   * Receives a callback that need to be called when finished.
   */
  afterRouteChange: noopMW
});

/**
 * Controllers
 */

// using a controller created by the controller factory
nitram.register('home', require('./controllers/home'));

// using a completely default controller
nitram.register('contact');

/**
 * Ready
 */
jquery(document).ready(function () {

  // Init
  nitram.init();
});